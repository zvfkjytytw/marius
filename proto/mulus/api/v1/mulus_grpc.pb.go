// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: mulus.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MulusAPI_SaveData_FullMethodName   = "/marius.mulus.api.v1.MulusAPI/SaveData"
	MulusAPI_GetData_FullMethodName    = "/marius.mulus.api.v1.MulusAPI/GetData"
	MulusAPI_DeleteData_FullMethodName = "/marius.mulus.api.v1.MulusAPI/DeleteData"
)

// MulusAPIClient is the client API for MulusAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MulusAPIClient interface {
	SaveData(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	GetData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	DeleteData(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type mulusAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMulusAPIClient(cc grpc.ClientConnInterface) MulusAPIClient {
	return &mulusAPIClient{cc}
}

func (c *mulusAPIClient) SaveData(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, MulusAPI_SaveData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mulusAPIClient) GetData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, MulusAPI_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mulusAPIClient) DeleteData(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, MulusAPI_DeleteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MulusAPIServer is the server API for MulusAPI service.
// All implementations must embed UnimplementedMulusAPIServer
// for forward compatibility.
type MulusAPIServer interface {
	SaveData(context.Context, *SaveRequest) (*SaveResponse, error)
	GetData(context.Context, *GetRequest) (*GetResponse, error)
	DeleteData(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedMulusAPIServer()
}

// UnimplementedMulusAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMulusAPIServer struct{}

func (UnimplementedMulusAPIServer) SaveData(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedMulusAPIServer) GetData(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedMulusAPIServer) DeleteData(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedMulusAPIServer) mustEmbedUnimplementedMulusAPIServer() {}
func (UnimplementedMulusAPIServer) testEmbeddedByValue()                  {}

// UnsafeMulusAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MulusAPIServer will
// result in compilation errors.
type UnsafeMulusAPIServer interface {
	mustEmbedUnimplementedMulusAPIServer()
}

func RegisterMulusAPIServer(s grpc.ServiceRegistrar, srv MulusAPIServer) {
	// If the following call pancis, it indicates UnimplementedMulusAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MulusAPI_ServiceDesc, srv)
}

func _MulusAPI_SaveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulusAPIServer).SaveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MulusAPI_SaveData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulusAPIServer).SaveData(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulusAPI_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulusAPIServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MulusAPI_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulusAPIServer).GetData(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulusAPI_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulusAPIServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MulusAPI_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulusAPIServer).DeleteData(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MulusAPI_ServiceDesc is the grpc.ServiceDesc for MulusAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MulusAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marius.mulus.api.v1.MulusAPI",
	HandlerType: (*MulusAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveData",
			Handler:    _MulusAPI_SaveData_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _MulusAPI_GetData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _MulusAPI_DeleteData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mulus.proto",
}
